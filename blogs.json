{"status":"ok","feed":{"url":"https://medium.com/feed/@nadavbeker","title":"Stories by Nadav Beker on Medium","link":"https://medium.com/@nadavbeker?source=rss-bbaa3f9c3109------2","author":"","description":"Stories by Nadav Beker on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/0*6EIKFVmotVgcV0Ft"},"items":[{"title":"How I used scriptable objects to build a powerup system","pubDate":"2022-02-07 05:57:31","link":"https://medium.com/@nadavbeker/how-i-used-scriptable-objects-to-build-a-powerup-system-39ad82628f6a?source=rss-bbaa3f9c3109------2","guid":"https://medium.com/p/39ad82628f6a","author":"Nadav Beker","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*pi1f0FN_oD7iOGrFGtkuMg.png","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*pi1f0FN_oD7iOGrFGtkuMg.png\"></figure><p>Unity\u2019s scriptable objects are a powerful tool in a game developer\u2019s toolbox. In this article we will talk about what scriptable objects are, how to use them, and how I used them to make a powerup system for my space shooter\u00a0game.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/244/1*SFc1J-zHGUnpdPtaegNoYA.gif\"><figcaption>Powerup System\u00a0Example</figcaption></figure><h4>What are scriptable objects?</h4>\n<blockquote>A ScriptableObject is a data container that you can use to save large amounts of data, independent of class instances</blockquote>\n<p>In Unity, almost all of the scripts we make are classes that inherit from MonoBehaviour. ScriptableObject (SO) is another base class Unity provides for us to define our own objects that we can later use in our components, scripts and even in the editor itself. <br>SOs are only instantiated once and can be used by multiple objects in our game without the same data being created and stored over and over\u00a0again.</p>\n<p>Let\u2019s look at an\u00a0example</p>\n<a href=\"https://medium.com/media/050db4c94d45e23e52b58baff06eafb5/href\">https://medium.com/media/050db4c94d45e23e52b58baff06eafb5/href</a><p>We created a class that will represent our shooting config. Going back to our space shooter this SO will be responsible to define how a player or enemy will shoot. Our class includes a GameObject for the projectile prefeab and two floats for our projectile lifetime and\u00a0speed.</p>\n<p>Our class is also decorated with CreateAssetMenu\u200a\u2014\u200aThis makes it so we can create objects from this type in the Unity editor just like we would a new script, a new sprite or any of Unity\u2019s built in\u00a0types.</p>\n<p>If we go back to our editor and right click \u2794 create we will see our shooting config appearing at the\u00a0top</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/532/1*Qw0Xz44DUYfPMaNTA3MsCw.png\"><figcaption>Creating our SO from the editor\u00a0menu</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/453/1*6WUY83p8g0XpV8kPTo_vyw.png\"><figcaption>New Shooting Config in the inspector</figcaption></figure><p>Now that we created a SO, we need to use it. Let\u2019s create a shooter class that will be responsible for our shooting\u00a0logic.</p>\n<a href=\"https://medium.com/media/b86f29e5478fd5c13d3a162cbe0fc9af/href\">https://medium.com/media/b86f29e5478fd5c13d3a162cbe0fc9af/href</a><p>Our Shooter class has a ShootingConfigSO and a Shoot method. We take the prefab, speed and lifetime that were defined in our SO and use them to instantiate our shots. Obviously to make this work we would need to call our Shoot method from the correct place (in our update method if the shoot key is pressed) but this example shows the baseline of how we can use our SO in our\u00a0code.</p>\n<h4>Powerup System</h4>\n<p>Now that we have our SO and Shooter class, building our powerup system is very simple. All we need to do is create a few shooting configs (which we can easily do from the editor\u2019s context menu) and then replace them in our Shooter class when we collide with a powerup. <br>Our current shooting config allows us to control the prefab, speed and lifetime of the shot so we can create different powerups for fast and stronger shots (kind of like sniping) or slower and weaker\u00a0shots.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/244/1*uY2DvaOyMwJtdfNDsUdO4A.gif\"><figcaption>Changing shooting\u00a0configs</figcaption></figure><p>From here we can expand our SO to include multiple shot configurations that will go at different angles at different speeds to create a more interesting powerup system but the base is\u00a0there.</p>\n<h4>Summary</h4>\n<p>In this article we learned what scriptable objects are, how we can create them in both code and editor and showed an example of using our SO in our MonoBehaviour classes.<br>Scriptable objects are a very powerful tool and mastering when and how to use them can make our game building much faster, easier and\u00a0lighter.</p>\n<p>To see my full powerup system visit: <a href=\"https://github.com/Kremzon/Covid-Fighter\">https://github.com/Kremzon/Covid-Fighter</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=39ad82628f6a\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*pi1f0FN_oD7iOGrFGtkuMg.png\"></figure><p>Unity\u2019s scriptable objects are a powerful tool in a game developer\u2019s toolbox. In this article we will talk about what scriptable objects are, how to use them, and how I used them to make a powerup system for my space shooter\u00a0game.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/244/1*SFc1J-zHGUnpdPtaegNoYA.gif\"><figcaption>Powerup System\u00a0Example</figcaption></figure><h4>What are scriptable objects?</h4>\n<blockquote>A ScriptableObject is a data container that you can use to save large amounts of data, independent of class instances</blockquote>\n<p>In Unity, almost all of the scripts we make are classes that inherit from MonoBehaviour. ScriptableObject (SO) is another base class Unity provides for us to define our own objects that we can later use in our components, scripts and even in the editor itself. <br>SOs are only instantiated once and can be used by multiple objects in our game without the same data being created and stored over and over\u00a0again.</p>\n<p>Let\u2019s look at an\u00a0example</p>\n<a href=\"https://medium.com/media/050db4c94d45e23e52b58baff06eafb5/href\">https://medium.com/media/050db4c94d45e23e52b58baff06eafb5/href</a><p>We created a class that will represent our shooting config. Going back to our space shooter this SO will be responsible to define how a player or enemy will shoot. Our class includes a GameObject for the projectile prefeab and two floats for our projectile lifetime and\u00a0speed.</p>\n<p>Our class is also decorated with CreateAssetMenu\u200a\u2014\u200aThis makes it so we can create objects from this type in the Unity editor just like we would a new script, a new sprite or any of Unity\u2019s built in\u00a0types.</p>\n<p>If we go back to our editor and right click \u2794 create we will see our shooting config appearing at the\u00a0top</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/532/1*Qw0Xz44DUYfPMaNTA3MsCw.png\"><figcaption>Creating our SO from the editor\u00a0menu</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/453/1*6WUY83p8g0XpV8kPTo_vyw.png\"><figcaption>New Shooting Config in the inspector</figcaption></figure><p>Now that we created a SO, we need to use it. Let\u2019s create a shooter class that will be responsible for our shooting\u00a0logic.</p>\n<a href=\"https://medium.com/media/b86f29e5478fd5c13d3a162cbe0fc9af/href\">https://medium.com/media/b86f29e5478fd5c13d3a162cbe0fc9af/href</a><p>Our Shooter class has a ShootingConfigSO and a Shoot method. We take the prefab, speed and lifetime that were defined in our SO and use them to instantiate our shots. Obviously to make this work we would need to call our Shoot method from the correct place (in our update method if the shoot key is pressed) but this example shows the baseline of how we can use our SO in our\u00a0code.</p>\n<h4>Powerup System</h4>\n<p>Now that we have our SO and Shooter class, building our powerup system is very simple. All we need to do is create a few shooting configs (which we can easily do from the editor\u2019s context menu) and then replace them in our Shooter class when we collide with a powerup. <br>Our current shooting config allows us to control the prefab, speed and lifetime of the shot so we can create different powerups for fast and stronger shots (kind of like sniping) or slower and weaker\u00a0shots.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/244/1*uY2DvaOyMwJtdfNDsUdO4A.gif\"><figcaption>Changing shooting\u00a0configs</figcaption></figure><p>From here we can expand our SO to include multiple shot configurations that will go at different angles at different speeds to create a more interesting powerup system but the base is\u00a0there.</p>\n<h4>Summary</h4>\n<p>In this article we learned what scriptable objects are, how we can create them in both code and editor and showed an example of using our SO in our MonoBehaviour classes.<br>Scriptable objects are a very powerful tool and mastering when and how to use them can make our game building much faster, easier and\u00a0lighter.</p>\n<p>To see my full powerup system visit: <a href=\"https://github.com/Kremzon/Covid-Fighter\">https://github.com/Kremzon/Covid-Fighter</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=39ad82628f6a\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["game-development","c-sharp-programming","programming","unity"]}]}